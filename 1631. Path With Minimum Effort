class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        set<pair<int,pair<int,int>>> s;
        s.insert({0,{0,0}});
        int n = heights.size();
        int m = heights[0].size();
        vector<vector<int>> ans(n,vector<int>(m,1e8));
        ans[0][0]=0;

        while(!s.empty()){
            auto it = s.begin();
            int z = (*it).first;
            int x = (*it).second.first;
            int y = (*it).second.second;
            s.erase(it);
            int row[] = {-1,0,+1,0};
            int col[] = {0,+1,0,-1};

            for(int i=0; i<4; i++){
                int nr = x+row[i];
                int nc = y+col[i];

                if(nr>=0 && nr<heights.size() && nc>=0 && nc<heights[0].size()){
                    int nval = max(abs(heights[nr][nc]-heights[x][y]),z);
                    if(ans[nr][nc]>nval){
                        ans[nr][nc]=nval;
                        s.insert({nval,{nr,nc}});
                    }
                }
            }
        }
        return ans[n-1][m-1];
    }
};
