//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++
class Solution {
  public:
    vector<int> shortestPath(int V, int E, vector<vector<int>>& edges) {
        vector<int> visited(V,0);
        visited[0]=1;
        
        queue<pair<int,int>> q;
        q.push({0,0});
        vector<int> ans(V,-1);
        vector<vector<pair<int,int>>> graph(V);
        for(int i=0; i<E; i++){
           graph[edges[i][0]].push_back({edges[i][1],edges[i][2]});
        }
        vector<int> v(V,0);
        
        queue<int> q1;
        vector<int> visited1(V,0);
        q1.push(0);
        visited1[0]=1;
        while(!q1.empty()){
            int x = q1.front();
            
            q1.pop();
            
            for(auto it : graph[x]){
                v[it.first]++;
                if(visited1[it.first]==0){
                    visited1[it.first]=1;
                    q1.push(it.first);
                }
            }
        }
        
        
        
        ans[0]=0;
        
        while(!q.empty()){
            int x = q.front().first;
            int y = q.front().second;
           
            q.pop();
            
            
            for(auto it : graph[x]){
                if(visited[it.first]==0){
                    if(ans[it.first]!=-1) ans[it.first]=min(ans[it.first],it.second+y);
                    else ans[it.first]=it.second+y;
                    
                    if(v[it.first]==1) {
                        q.push({it.first,ans[it.first]});
                        visited[it.first]=1;
                    }
                    v[it.first]--;
                }
            }
        }
        return ans;
       
    }
};


//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> edges;
        for (int i = 0; i < m; ++i) {
            vector<int> temp;
            for (int j = 0; j < 3; ++j) {
                int x;
                cin >> x;
                temp.push_back(x);
            }
            edges.push_back(temp);
        }
        Solution obj;
        vector<int> res = obj.shortestPath(n, m, edges);
        for (auto x : res) {
            cout << x << " ";
        }
        cout << "\n";

        cout << "~"
             << "\n";
    }
}

// } Driver Code Ends
