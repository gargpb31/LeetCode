class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        vector<int> visited(graph.size(),0);

        vector<int> v(graph.size(),0);

        for(int i=0; i<graph.size(); i++){
          v[i]=graph[i].size();
        }

        queue<int> q;
        for(int i=0; i<v.size(); i++){
            if(v[i]==0) {
                q.push(i);
                visited[i]=1;
            }
        }

        vector<vector<int>> graph2(v.size());

        for(int i=0; i<graph.size(); i++){
            for(auto it : graph[i]){
                graph2[it].push_back(i);
            }
        }


        while(!q.empty()){
            int x = q.front();
            q.pop();
            visited[x]=1;
            for(auto it : graph2[x]){
                if(v[it]==1) q.push(it); 
                v[it]--;
            }
        }

        vector<int> ans;

        for(int i=0; i<v.size(); i++){
            if(visited[i]==1) ans.push_back(i);
        }

        return ans;

    }
};
