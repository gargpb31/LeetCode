//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<vector<int>> adj) {
        vector<int> visited(V,0);
        vector<int> v(V,0);
        for(int i=0; i<adj.size(); i++){
            for(auto it : adj[i]){
                v[it]++;
            }
        }
        
        queue<int> q;
        for(int i=0; i<V; i++) {
            if(v[i]==0) q.push(i);
        }
        
        while(!q.empty()){
            visited[q.front()]=1;
            int x = q.front();
            q.pop();
            
            for(auto it : adj[x]){
                if(v[it]>0){
                    v[it]--;
                    if(v[it]==0) q.push(it);
                }
            }
        }
        for(int i=0; i<V; i++){
            if(visited[i]==0) return true;
        }
        return false;
        
    }
};

//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<vector<int>> adj(V);

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";

        cout << "~"
             << "\n";
    }

    return 0;
}

// } Driver Code Ends
