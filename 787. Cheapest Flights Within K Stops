class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst,
                          int k) {
        vector<vector<pair<int, int>>> graph(n);
        for (int i = 0; i < flights.size(); i++) {
            graph[flights[i][0]].push_back({flights[i][1], flights[i][2]});
        }

        vector<vector<int>> ans(n, vector<int>(n, 1e9));
        for (int i = 0; i < n; i++)
            ans[src][i] = 0;
        set<pair<int, pair<int, int>>> s;
        s.insert({0, {src, 0}});

        while (!s.empty()) {
            auto it = s.begin();
            int x = (*it).first;
            int y = (*it).second.first;
            int z = (*it).second.second;

            s.erase(it);

            for (auto it2 : graph[y]) {
                int nn = x + it2.second;
                if (it2.first == dst) {
                    if (z <= k) {
                        if (ans[it2.first][z] > nn) {
                            ans[it2.first][z] = nn;
                            s.insert({nn, {it2.first, z + 1}});
                        }
                    }
                } else {
                    if (z <= k) {
                        if (ans[it2.first][z] > nn) {
                            ans[it2.first][z] = nn;
                            s.insert({nn, {it2.first, z + 1}});
                        }
                    }
                }
            }
        }
        int fans = 1e9;
        for (int i = 0; i <= k; i++) {
            fans = min(fans, ans[dst][i]);
        }
        if (fans == 1e9)
            return -1;
        return fans;
    }
};
