class Solution {
public:

    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        if(grid[0][0]==1 || grid[grid.size()-1][grid[0].size()-1]==1) return -1;
        
        vector<vector<int>> visited(grid.size(),vector<int>(grid[0].size(),0));
       


        queue<pair<pair<int,int>,int>> q;
        q.push({{0,0},1});
        visited[0][0]=1;

        while(!q.empty()){
            int n = q.front().first.first;
            int m = q.front().first.second;
            int z = q.front().second;
            q.pop();
            if(n==grid.size()-1 && m==grid[0].size()-1) return z;
        int row[] = {-1,0,+1,0,-1,+1,-1,+1};
        int col[] = {0,-1,0,1,1,1,-1,-1};
        
        for(int i=0; i<8; i++){
            int nrow = n+row[i];
            int ncol = m+col[i];

            if(nrow>=0 && nrow<grid.size() && ncol>=0 && ncol<grid[0].size()){
                if(visited[nrow][ncol]==0 && grid[nrow][ncol]==0){
                    visited[nrow][ncol]=1;
                    q.push({{nrow,ncol},z+1});
                }
            }
        }
        }
        return -1;

    }
};
