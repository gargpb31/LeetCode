//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    string findOrder(vector<string> &words) {
       
       
       vector<vector<int>> graph(26);
       map<int,int> m;
       for(int i=0; i<words.size(); i++){
          for(auto it : words[i]){
             int x = it-'a';
             m[x]++;
          }
       }
       for(int i=0; i<words.size()-1; i++){
            int g=0;
            while(words[i][g]==words[i+1][g]) {g++;
            
            if(g==min(words[i].size(),words[i+1].size())) {g=-1; break;}
            
            }
            if(g==-1){
                if(words[i+1].size()<words[i].size()) return "";
            }
            else{
                int x = words[i][g]-'a';
                int y = words[i+1][g]-'a';
                graph[x].push_back(y);
            }
            
            
       }
   
       
       vector<int> v(26,0);
       for(int i=0; i<26; i++){
           for(auto it : graph[i]){
               v[it]++;
           }
       }
       
       string ans = "";
       
       queue<int> q;
       for(int i=0; i<v.size(); i++){
           if(v[i]==0 && m.find(i)!=m.end()) q.push(i);
       }
       
       while(!q.empty()){
           int x = q.front();
           q.pop();
           
           char d = 'a'+x;
          ans+=d;
          
          for(auto it : graph[x]){
              if(v[it]==1) q.push(it);
              v[it]--;
          }
       }
       if(ans.size()!=m.size()) return "";
       return ans;
        
       
    }
};

//{ Driver Code Starts.

bool validate(const vector<string> &original, const string &order) {
    unordered_map<char, int> mp;
    for (const string &word : original) {
        for (const char &ch : word) {
            mp[ch] = 1;
        }
    }
    for (const char &ch : order) {
        if (mp.find(ch) == mp.end())
            return false;
        mp.erase(ch);
    }
    if (!mp.empty())
        return false;

    for (int i = 0; i < order.size(); i++) {
        mp[order[i]] = i;
    }

    for (int i = 0; i < original.size() - 1; i++) {
        const string &a = original[i];
        const string &b = original[i + 1];
        int k = 0, n = a.size(), m = b.size();
        while (k < n and k < m and a[k] == b[k]) {
            k++;
        }
        if (k < n and k < m and mp[a[k]] > mp[b[k]]) {
            return false;
        }
        if (k != n and k == m) {
            return false;
        }
    }
    return true;
}

int main() {
    string str;
    getline(cin, str);
    int t = stoi(str);
    while (t--) {
        getline(cin, str);
        stringstream ss(str);
        string curr;
        vector<string> words;
        while (ss >> curr)
            words.push_back(curr);

        vector<string> original = words;

        Solution ob;
        string order = ob.findOrder(words);

        if (order.empty()) {
            cout << "\"\"" << endl;
        } else {
            cout << (validate(original, order) ? "true" : "false") << endl;
        }
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends
